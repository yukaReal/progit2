==== Git and Bazaar

Among the DVCS, another famous one is http://bazaar.canonical.com/[Bazaar].
Bazaar is free and open source, and is part of the http://www.gnu.org/[GNU Project].
It behaves very differently from Git.
Sometimes, to do the same thing as with Git, you have to use a different keyword, and some keywords that are common don't have the same meaning.
In particular, the branch management is very different and may cause confusion, especially when someone comes from Git's universe.
Nevertheless, it is possible to work on a Bazaar repository from a Git one.

There are many projects that allow you to use Git as a Bazaar client.
Here we'll use Felipe Contreras' project that you may find at https://github.com/felipec/git-remote-bzr[].
To install it, you just have to download the file git-remote-bzr in a folder contained in your `$PATH`:
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

You also need to have Bazaar installed.
That's all!

===== Create a Git repository from a Bazaar repository

It is simple to use.
It is enough to clone a Bazaar repository prefixing it by `bzr::`.
Since Git and Bazaar both do full clones to your machine, it's possible to attach a Git clone to your local Bazaar clone, but it isn't recommended.
It's much easier to attach your Git clone directly to the same place your Bazaar clone is attached to â€’ the central repository.

Let's suppose that you worked with a remote repository which is at address `bzr+ssh://developer@mybazaarserver:myproject`.
Then you must clone it in the following way:
[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

At this point, your Git repository is created but it is not compacted for optimal disk use.
That's why you should also clean and compact your Git repository, especially if it is a big one:
[source,console]
----
$ git gc --aggressive
----

===== Bazaar branches

Bazaar only allows you to clone branches, but a repository may contain several branches, and `git-remote-bzr` can clone both.
For example, to clone a branch:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

And to clone the whole repository:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

The second command clones all the branches contained in the emacs repository; nevertheless, it is possible to point out some branches:
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Some remote repositories don't allow to list their branches, in which case you have to manually specify them, and even though you could specify the configuration in the cloning command, you may find this easier:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Ignore what is ignored with .bzrignore

As the format of the `.bzrignore` file is completely compatible with `.gitignore`'s one, and as you shouldn't make a `.gitignore` file in your repository, it is enough to make a symbolic link to `.bzrignore` so that the potential changes of `.bzrignore` are taken into account:
[source,console]
----
$ ln -s .bzrignore .git/info/exclude
----

===== Fetch the changes of the remote repository

To fetch the changes of the remote, you pull changes as usually, using Git commands.
Supposing that your changes are on the `master` branch, you merge or rebase your work on the `origin/master` branch:
[source,console]
----
$ git pull --rebase origin
----

===== Push your work on the remote repository

Because Bazaar also has the concept of merge commits, there will be no problem if you push a merge commit.
So you can work on a branch, merge the changes into `master` and push your work.
Then, you create your branches, you test and commit your work as usual.
You finally push your work to the Bazaar repository:
[source,console]
----
$ git push origin master
----

===== Caveats

Git's remote-helpers framework has some limitations that apply.
In particular, these commands don't work:

* git push origin :branch-to-delete (Bazaar can't accept ref deletions in this way.)
* git push origin old:new (it will push 'old')
* git push --dry-run origin branch (it will push)

===== Summary

Since Git's and Bazaar's models are similar, there isn't a lot of resistance when working across the boundary.
As long as you watch out for the limitations, and are always aware that the remote repository isn't natively Git, you'll be fine.
